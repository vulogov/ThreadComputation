// Code generated from ThreadComputation.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 19, 237,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 5, 7, 72, 10, 7, 3, 8, 6, 8, 75, 10, 8, 13, 8, 14, 8, 76,
	3, 9, 3, 9, 7, 9, 81, 10, 9, 12, 9, 14, 9, 84, 11, 9, 3, 10, 5, 10, 87,
	10, 10, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 93, 10, 11, 12, 11, 14, 11,
	96, 11, 11, 3, 11, 6, 11, 99, 10, 11, 13, 11, 14, 11, 100, 5, 11, 103,
	10, 11, 3, 12, 3, 12, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16,
	3, 16, 3, 16, 3, 16, 7, 16, 117, 10, 16, 12, 16, 14, 16, 120, 11, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 6, 17, 128, 10, 17, 13, 17, 14,
	17, 129, 3, 17, 3, 17, 3, 18, 5, 18, 135, 10, 18, 3, 18, 3, 18, 5, 18,
	139, 10, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3,
	22, 5, 22, 150, 10, 22, 3, 22, 6, 22, 153, 10, 22, 13, 22, 14, 22, 154,
	3, 22, 5, 22, 158, 10, 22, 3, 22, 3, 22, 5, 22, 162, 10, 22, 3, 22, 6,
	22, 165, 10, 22, 13, 22, 14, 22, 166, 3, 22, 5, 22, 170, 10, 22, 3, 22,
	5, 22, 173, 10, 22, 3, 23, 7, 23, 176, 10, 23, 12, 23, 14, 23, 179, 11,
	23, 3, 23, 3, 23, 6, 23, 183, 10, 23, 13, 23, 14, 23, 184, 3, 23, 6, 23,
	188, 10, 23, 13, 23, 14, 23, 189, 3, 23, 5, 23, 193, 10, 23, 3, 24, 5,
	24, 196, 10, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 204,
	10, 25, 3, 25, 7, 25, 207, 10, 25, 12, 25, 14, 25, 210, 11, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 217, 10, 25, 3, 25, 7, 25, 220, 10,
	25, 12, 25, 14, 25, 223, 11, 25, 3, 25, 5, 25, 226, 10, 25, 3, 26, 5, 26,
	229, 10, 26, 3, 26, 5, 26, 232, 10, 26, 3, 27, 3, 27, 5, 27, 236, 10, 27,
	3, 118, 2, 28, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19,
	11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37,
	2, 39, 2, 41, 2, 43, 2, 45, 2, 47, 2, 49, 2, 51, 2, 53, 2, 3, 2, 13, 17,
	2, 35, 35, 40, 40, 44, 47, 49, 49, 62, 64, 96, 97, 126, 126, 174, 174,
	217, 217, 249, 249, 957, 957, 8595, 8595, 8597, 8597, 8712, 8713, 8745,
	8746, 9, 2, 38, 38, 65, 66, 98, 98, 128, 128, 8706, 8706, 8709, 8710, 8730,
	8730, 4, 2, 11, 11, 34, 34, 3, 2, 51, 59, 3, 2, 50, 59, 4, 2, 45, 45, 47,
	47, 4, 2, 71, 71, 103, 103, 6, 2, 12, 12, 15, 15, 41, 41, 94, 94, 6, 2,
	12, 12, 15, 15, 36, 36, 94, 94, 4, 2, 67, 92, 99, 124, 3, 2, 99, 124, 2,
	262, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2,
	2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3,
	2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25,
	3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2,
	33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 3, 55, 3, 2, 2, 2, 5, 57, 3, 2, 2, 2,
	7, 59, 3, 2, 2, 2, 9, 62, 3, 2, 2, 2, 11, 64, 3, 2, 2, 2, 13, 71, 3, 2,
	2, 2, 15, 74, 3, 2, 2, 2, 17, 78, 3, 2, 2, 2, 19, 86, 3, 2, 2, 2, 21, 102,
	3, 2, 2, 2, 23, 104, 3, 2, 2, 2, 25, 106, 3, 2, 2, 2, 27, 108, 3, 2, 2,
	2, 29, 110, 3, 2, 2, 2, 31, 112, 3, 2, 2, 2, 33, 127, 3, 2, 2, 2, 35, 138,
	3, 2, 2, 2, 37, 142, 3, 2, 2, 2, 39, 144, 3, 2, 2, 2, 41, 146, 3, 2, 2,
	2, 43, 172, 3, 2, 2, 2, 45, 192, 3, 2, 2, 2, 47, 195, 3, 2, 2, 2, 49, 225,
	3, 2, 2, 2, 51, 231, 3, 2, 2, 2, 53, 235, 3, 2, 2, 2, 55, 56, 7, 93, 2,
	2, 56, 4, 3, 2, 2, 2, 57, 58, 7, 60, 2, 2, 58, 6, 3, 2, 2, 2, 59, 60, 7,
	61, 2, 2, 60, 61, 7, 61, 2, 2, 61, 8, 3, 2, 2, 2, 62, 63, 7, 95, 2, 2,
	63, 10, 3, 2, 2, 2, 64, 65, 7, 37, 2, 2, 65, 12, 3, 2, 2, 2, 66, 72, 5,
	17, 9, 2, 67, 72, 5, 15, 8, 2, 68, 72, 5, 19, 10, 2, 69, 72, 5, 23, 12,
	2, 70, 72, 5, 25, 13, 2, 71, 66, 3, 2, 2, 2, 71, 67, 3, 2, 2, 2, 71, 68,
	3, 2, 2, 2, 71, 69, 3, 2, 2, 2, 71, 70, 3, 2, 2, 2, 72, 14, 3, 2, 2, 2,
	73, 75, 5, 27, 14, 2, 74, 73, 3, 2, 2, 2, 75, 76, 3, 2, 2, 2, 76, 74, 3,
	2, 2, 2, 76, 77, 3, 2, 2, 2, 77, 16, 3, 2, 2, 2, 78, 82, 5, 51, 26, 2,
	79, 81, 5, 53, 27, 2, 80, 79, 3, 2, 2, 2, 81, 84, 3, 2, 2, 2, 82, 80, 3,
	2, 2, 2, 82, 83, 3, 2, 2, 2, 83, 18, 3, 2, 2, 2, 84, 82, 3, 2, 2, 2, 85,
	87, 5, 41, 21, 2, 86, 85, 3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 88, 3, 2,
	2, 2, 88, 89, 5, 21, 11, 2, 89, 20, 3, 2, 2, 2, 90, 94, 5, 37, 19, 2, 91,
	93, 5, 39, 20, 2, 92, 91, 3, 2, 2, 2, 93, 96, 3, 2, 2, 2, 94, 92, 3, 2,
	2, 2, 94, 95, 3, 2, 2, 2, 95, 103, 3, 2, 2, 2, 96, 94, 3, 2, 2, 2, 97,
	99, 7, 50, 2, 2, 98, 97, 3, 2, 2, 2, 99, 100, 3, 2, 2, 2, 100, 98, 3, 2,
	2, 2, 100, 101, 3, 2, 2, 2, 101, 103, 3, 2, 2, 2, 102, 90, 3, 2, 2, 2,
	102, 98, 3, 2, 2, 2, 103, 22, 3, 2, 2, 2, 104, 105, 5, 43, 22, 2, 105,
	24, 3, 2, 2, 2, 106, 107, 5, 49, 25, 2, 107, 26, 3, 2, 2, 2, 108, 109,
	9, 2, 2, 2, 109, 28, 3, 2, 2, 2, 110, 111, 9, 3, 2, 2, 111, 30, 3, 2, 2,
	2, 112, 113, 7, 49, 2, 2, 113, 114, 7, 44, 2, 2, 114, 118, 3, 2, 2, 2,
	115, 117, 11, 2, 2, 2, 116, 115, 3, 2, 2, 2, 117, 120, 3, 2, 2, 2, 118,
	119, 3, 2, 2, 2, 118, 116, 3, 2, 2, 2, 119, 121, 3, 2, 2, 2, 120, 118,
	3, 2, 2, 2, 121, 122, 7, 44, 2, 2, 122, 123, 7, 49, 2, 2, 123, 124, 3,
	2, 2, 2, 124, 125, 8, 16, 2, 2, 125, 32, 3, 2, 2, 2, 126, 128, 9, 4, 2,
	2, 127, 126, 3, 2, 2, 2, 128, 129, 3, 2, 2, 2, 129, 127, 3, 2, 2, 2, 129,
	130, 3, 2, 2, 2, 130, 131, 3, 2, 2, 2, 131, 132, 8, 17, 2, 2, 132, 34,
	3, 2, 2, 2, 133, 135, 7, 15, 2, 2, 134, 133, 3, 2, 2, 2, 134, 135, 3, 2,
	2, 2, 135, 136, 3, 2, 2, 2, 136, 139, 7, 12, 2, 2, 137, 139, 7, 15, 2,
	2, 138, 134, 3, 2, 2, 2, 138, 137, 3, 2, 2, 2, 139, 140, 3, 2, 2, 2, 140,
	141, 8, 18, 2, 2, 141, 36, 3, 2, 2, 2, 142, 143, 9, 5, 2, 2, 143, 38, 3,
	2, 2, 2, 144, 145, 9, 6, 2, 2, 145, 40, 3, 2, 2, 2, 146, 147, 9, 7, 2,
	2, 147, 42, 3, 2, 2, 2, 148, 150, 5, 41, 21, 2, 149, 148, 3, 2, 2, 2, 149,
	150, 3, 2, 2, 2, 150, 157, 3, 2, 2, 2, 151, 153, 9, 6, 2, 2, 152, 151,
	3, 2, 2, 2, 153, 154, 3, 2, 2, 2, 154, 152, 3, 2, 2, 2, 154, 155, 3, 2,
	2, 2, 155, 158, 3, 2, 2, 2, 156, 158, 5, 45, 23, 2, 157, 152, 3, 2, 2,
	2, 157, 156, 3, 2, 2, 2, 158, 159, 3, 2, 2, 2, 159, 161, 9, 8, 2, 2, 160,
	162, 9, 7, 2, 2, 161, 160, 3, 2, 2, 2, 161, 162, 3, 2, 2, 2, 162, 164,
	3, 2, 2, 2, 163, 165, 9, 6, 2, 2, 164, 163, 3, 2, 2, 2, 165, 166, 3, 2,
	2, 2, 166, 164, 3, 2, 2, 2, 166, 167, 3, 2, 2, 2, 167, 173, 3, 2, 2, 2,
	168, 170, 5, 41, 21, 2, 169, 168, 3, 2, 2, 2, 169, 170, 3, 2, 2, 2, 170,
	171, 3, 2, 2, 2, 171, 173, 5, 45, 23, 2, 172, 149, 3, 2, 2, 2, 172, 169,
	3, 2, 2, 2, 173, 44, 3, 2, 2, 2, 174, 176, 9, 6, 2, 2, 175, 174, 3, 2,
	2, 2, 176, 179, 3, 2, 2, 2, 177, 175, 3, 2, 2, 2, 177, 178, 3, 2, 2, 2,
	178, 180, 3, 2, 2, 2, 179, 177, 3, 2, 2, 2, 180, 182, 7, 48, 2, 2, 181,
	183, 9, 6, 2, 2, 182, 181, 3, 2, 2, 2, 183, 184, 3, 2, 2, 2, 184, 182,
	3, 2, 2, 2, 184, 185, 3, 2, 2, 2, 185, 193, 3, 2, 2, 2, 186, 188, 9, 6,
	2, 2, 187, 186, 3, 2, 2, 2, 188, 189, 3, 2, 2, 2, 189, 187, 3, 2, 2, 2,
	189, 190, 3, 2, 2, 2, 190, 191, 3, 2, 2, 2, 191, 193, 7, 48, 2, 2, 192,
	177, 3, 2, 2, 2, 192, 187, 3, 2, 2, 2, 193, 46, 3, 2, 2, 2, 194, 196, 7,
	15, 2, 2, 195, 194, 3, 2, 2, 2, 195, 196, 3, 2, 2, 2, 196, 197, 3, 2, 2,
	2, 197, 198, 7, 12, 2, 2, 198, 48, 3, 2, 2, 2, 199, 208, 7, 41, 2, 2, 200,
	203, 7, 94, 2, 2, 201, 204, 5, 47, 24, 2, 202, 204, 11, 2, 2, 2, 203, 201,
	3, 2, 2, 2, 203, 202, 3, 2, 2, 2, 204, 207, 3, 2, 2, 2, 205, 207, 10, 9,
	2, 2, 206, 200, 3, 2, 2, 2, 206, 205, 3, 2, 2, 2, 207, 210, 3, 2, 2, 2,
	208, 206, 3, 2, 2, 2, 208, 209, 3, 2, 2, 2, 209, 211, 3, 2, 2, 2, 210,
	208, 3, 2, 2, 2, 211, 226, 7, 41, 2, 2, 212, 221, 7, 36, 2, 2, 213, 216,
	7, 94, 2, 2, 214, 217, 5, 47, 24, 2, 215, 217, 11, 2, 2, 2, 216, 214, 3,
	2, 2, 2, 216, 215, 3, 2, 2, 2, 217, 220, 3, 2, 2, 2, 218, 220, 10, 10,
	2, 2, 219, 213, 3, 2, 2, 2, 219, 218, 3, 2, 2, 2, 220, 223, 3, 2, 2, 2,
	221, 219, 3, 2, 2, 2, 221, 222, 3, 2, 2, 2, 222, 224, 3, 2, 2, 2, 223,
	221, 3, 2, 2, 2, 224, 226, 7, 36, 2, 2, 225, 199, 3, 2, 2, 2, 225, 212,
	3, 2, 2, 2, 226, 50, 3, 2, 2, 2, 227, 229, 9, 11, 2, 2, 228, 227, 3, 2,
	2, 2, 229, 232, 3, 2, 2, 2, 230, 232, 9, 12, 2, 2, 231, 228, 3, 2, 2, 2,
	231, 230, 3, 2, 2, 2, 232, 52, 3, 2, 2, 2, 233, 236, 5, 51, 26, 2, 234,
	236, 7, 48, 2, 2, 235, 233, 3, 2, 2, 2, 235, 234, 3, 2, 2, 2, 236, 54,
	3, 2, 2, 2, 36, 2, 71, 76, 82, 86, 94, 100, 102, 118, 129, 134, 138, 149,
	154, 157, 161, 166, 169, 172, 177, 184, 189, 192, 195, 203, 206, 208, 216,
	219, 221, 225, 228, 231, 235, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'['", "':'", "';;'", "']'", "'#'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "FUNC_NAME", "OPS", "NAME", "INTEGER", "DECIMAL_INTEGER",
	"FLOAT_NUMBER", "STRING", "OP", "MOD", "BLOCK_COMMENT", "WhiteSpace", "NewLine",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "FUNC_NAME", "OPS", "NAME", "INTEGER",
	"DECIMAL_INTEGER", "FLOAT_NUMBER", "STRING", "OP", "MOD", "BLOCK_COMMENT",
	"WhiteSpace", "NewLine", "NON_ZERO_DIGIT", "DIGIT", "SIGN", "EXPONENT_OR_POINT_FLOAT",
	"POINT_FLOAT", "RN", "SHORT_STRING", "ID_START", "ID_CONTINUE",
}

type ThreadComputationLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewThreadComputationLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *ThreadComputationLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewThreadComputationLexer(input antlr.CharStream) *ThreadComputationLexer {
	l := new(ThreadComputationLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "ThreadComputation.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ThreadComputationLexer tokens.
const (
	ThreadComputationLexerT__0            = 1
	ThreadComputationLexerT__1            = 2
	ThreadComputationLexerT__2            = 3
	ThreadComputationLexerT__3            = 4
	ThreadComputationLexerT__4            = 5
	ThreadComputationLexerFUNC_NAME       = 6
	ThreadComputationLexerOPS             = 7
	ThreadComputationLexerNAME            = 8
	ThreadComputationLexerINTEGER         = 9
	ThreadComputationLexerDECIMAL_INTEGER = 10
	ThreadComputationLexerFLOAT_NUMBER    = 11
	ThreadComputationLexerSTRING          = 12
	ThreadComputationLexerOP              = 13
	ThreadComputationLexerMOD             = 14
	ThreadComputationLexerBLOCK_COMMENT   = 15
	ThreadComputationLexerWhiteSpace      = 16
	ThreadComputationLexerNewLine         = 17
)
