// Code generated from ThreadComputation.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 14, 241,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 7, 4, 52, 10, 4, 12, 4, 14, 4, 55, 11, 4,
	3, 5, 5, 5, 58, 10, 5, 3, 5, 3, 5, 3, 6, 3, 6, 7, 6, 64, 10, 6, 12, 6,
	14, 6, 67, 11, 6, 3, 6, 6, 6, 70, 10, 6, 13, 6, 14, 6, 71, 5, 6, 74, 10,
	6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 95, 10, 9, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 115, 10, 10, 3, 11, 3,
	11, 3, 11, 3, 11, 7, 11, 121, 10, 11, 12, 11, 14, 11, 124, 11, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 12, 6, 12, 132, 10, 12, 13, 12, 14, 12,
	133, 3, 12, 3, 12, 3, 13, 5, 13, 139, 10, 13, 3, 13, 3, 13, 5, 13, 143,
	10, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17,
	5, 17, 154, 10, 17, 3, 17, 6, 17, 157, 10, 17, 13, 17, 14, 17, 158, 3,
	17, 5, 17, 162, 10, 17, 3, 17, 3, 17, 5, 17, 166, 10, 17, 3, 17, 6, 17,
	169, 10, 17, 13, 17, 14, 17, 170, 3, 17, 5, 17, 174, 10, 17, 3, 17, 5,
	17, 177, 10, 17, 3, 18, 7, 18, 180, 10, 18, 12, 18, 14, 18, 183, 11, 18,
	3, 18, 3, 18, 6, 18, 187, 10, 18, 13, 18, 14, 18, 188, 3, 18, 6, 18, 192,
	10, 18, 13, 18, 14, 18, 193, 3, 18, 5, 18, 197, 10, 18, 3, 19, 5, 19, 200,
	10, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 208, 10, 20, 3,
	20, 7, 20, 211, 10, 20, 12, 20, 14, 20, 214, 11, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 5, 20, 221, 10, 20, 3, 20, 7, 20, 224, 10, 20, 12, 20, 14,
	20, 227, 11, 20, 3, 20, 5, 20, 230, 10, 20, 3, 21, 5, 21, 233, 10, 21,
	3, 21, 5, 21, 236, 10, 21, 3, 22, 3, 22, 5, 22, 240, 10, 22, 3, 122, 2,
	23, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12,
	23, 13, 25, 14, 27, 2, 29, 2, 31, 2, 33, 2, 35, 2, 37, 2, 39, 2, 41, 2,
	43, 2, 3, 2, 11, 4, 2, 11, 11, 34, 34, 3, 2, 51, 59, 3, 2, 50, 59, 4, 2,
	45, 45, 47, 47, 4, 2, 71, 71, 103, 103, 6, 2, 12, 12, 15, 15, 41, 41, 94,
	94, 6, 2, 12, 12, 15, 15, 36, 36, 94, 94, 4, 2, 67, 92, 99, 124, 3, 2,
	99, 124, 2, 265, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2,
	2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2,
	2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2,
	2, 2, 2, 25, 3, 2, 2, 2, 3, 45, 3, 2, 2, 2, 5, 47, 3, 2, 2, 2, 7, 49, 3,
	2, 2, 2, 9, 57, 3, 2, 2, 2, 11, 73, 3, 2, 2, 2, 13, 75, 3, 2, 2, 2, 15,
	77, 3, 2, 2, 2, 17, 94, 3, 2, 2, 2, 19, 114, 3, 2, 2, 2, 21, 116, 3, 2,
	2, 2, 23, 131, 3, 2, 2, 2, 25, 142, 3, 2, 2, 2, 27, 146, 3, 2, 2, 2, 29,
	148, 3, 2, 2, 2, 31, 150, 3, 2, 2, 2, 33, 176, 3, 2, 2, 2, 35, 196, 3,
	2, 2, 2, 37, 199, 3, 2, 2, 2, 39, 229, 3, 2, 2, 2, 41, 235, 3, 2, 2, 2,
	43, 239, 3, 2, 2, 2, 45, 46, 7, 93, 2, 2, 46, 4, 3, 2, 2, 2, 47, 48, 7,
	95, 2, 2, 48, 6, 3, 2, 2, 2, 49, 53, 5, 41, 21, 2, 50, 52, 5, 43, 22, 2,
	51, 50, 3, 2, 2, 2, 52, 55, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 53, 54, 3,
	2, 2, 2, 54, 8, 3, 2, 2, 2, 55, 53, 3, 2, 2, 2, 56, 58, 5, 31, 16, 2, 57,
	56, 3, 2, 2, 2, 57, 58, 3, 2, 2, 2, 58, 59, 3, 2, 2, 2, 59, 60, 5, 11,
	6, 2, 60, 10, 3, 2, 2, 2, 61, 65, 5, 27, 14, 2, 62, 64, 5, 29, 15, 2, 63,
	62, 3, 2, 2, 2, 64, 67, 3, 2, 2, 2, 65, 63, 3, 2, 2, 2, 65, 66, 3, 2, 2,
	2, 66, 74, 3, 2, 2, 2, 67, 65, 3, 2, 2, 2, 68, 70, 7, 50, 2, 2, 69, 68,
	3, 2, 2, 2, 70, 71, 3, 2, 2, 2, 71, 69, 3, 2, 2, 2, 71, 72, 3, 2, 2, 2,
	72, 74, 3, 2, 2, 2, 73, 61, 3, 2, 2, 2, 73, 69, 3, 2, 2, 2, 74, 12, 3,
	2, 2, 2, 75, 76, 5, 33, 17, 2, 76, 14, 3, 2, 2, 2, 77, 78, 5, 39, 20, 2,
	78, 16, 3, 2, 2, 2, 79, 80, 7, 37, 2, 2, 80, 81, 7, 118, 2, 2, 81, 82,
	7, 116, 2, 2, 82, 83, 7, 119, 2, 2, 83, 95, 7, 103, 2, 2, 84, 85, 7, 37,
	2, 2, 85, 86, 7, 86, 2, 2, 86, 87, 7, 116, 2, 2, 87, 88, 7, 119, 2, 2,
	88, 95, 7, 103, 2, 2, 89, 90, 7, 37, 2, 2, 90, 91, 7, 86, 2, 2, 91, 92,
	7, 84, 2, 2, 92, 93, 7, 87, 2, 2, 93, 95, 7, 71, 2, 2, 94, 79, 3, 2, 2,
	2, 94, 84, 3, 2, 2, 2, 94, 89, 3, 2, 2, 2, 95, 18, 3, 2, 2, 2, 96, 97,
	7, 37, 2, 2, 97, 98, 7, 104, 2, 2, 98, 99, 7, 99, 2, 2, 99, 100, 7, 110,
	2, 2, 100, 101, 7, 117, 2, 2, 101, 115, 7, 103, 2, 2, 102, 103, 7, 37,
	2, 2, 103, 104, 7, 72, 2, 2, 104, 105, 7, 99, 2, 2, 105, 106, 7, 110, 2,
	2, 106, 107, 7, 117, 2, 2, 107, 115, 7, 103, 2, 2, 108, 109, 7, 37, 2,
	2, 109, 110, 7, 72, 2, 2, 110, 111, 7, 67, 2, 2, 111, 112, 7, 78, 2, 2,
	112, 113, 7, 85, 2, 2, 113, 115, 7, 71, 2, 2, 114, 96, 3, 2, 2, 2, 114,
	102, 3, 2, 2, 2, 114, 108, 3, 2, 2, 2, 115, 20, 3, 2, 2, 2, 116, 117, 7,
	49, 2, 2, 117, 118, 7, 44, 2, 2, 118, 122, 3, 2, 2, 2, 119, 121, 11, 2,
	2, 2, 120, 119, 3, 2, 2, 2, 121, 124, 3, 2, 2, 2, 122, 123, 3, 2, 2, 2,
	122, 120, 3, 2, 2, 2, 123, 125, 3, 2, 2, 2, 124, 122, 3, 2, 2, 2, 125,
	126, 7, 44, 2, 2, 126, 127, 7, 49, 2, 2, 127, 128, 3, 2, 2, 2, 128, 129,
	8, 11, 2, 2, 129, 22, 3, 2, 2, 2, 130, 132, 9, 2, 2, 2, 131, 130, 3, 2,
	2, 2, 132, 133, 3, 2, 2, 2, 133, 131, 3, 2, 2, 2, 133, 134, 3, 2, 2, 2,
	134, 135, 3, 2, 2, 2, 135, 136, 8, 12, 2, 2, 136, 24, 3, 2, 2, 2, 137,
	139, 7, 15, 2, 2, 138, 137, 3, 2, 2, 2, 138, 139, 3, 2, 2, 2, 139, 140,
	3, 2, 2, 2, 140, 143, 7, 12, 2, 2, 141, 143, 7, 15, 2, 2, 142, 138, 3,
	2, 2, 2, 142, 141, 3, 2, 2, 2, 143, 144, 3, 2, 2, 2, 144, 145, 8, 13, 2,
	2, 145, 26, 3, 2, 2, 2, 146, 147, 9, 3, 2, 2, 147, 28, 3, 2, 2, 2, 148,
	149, 9, 4, 2, 2, 149, 30, 3, 2, 2, 2, 150, 151, 9, 5, 2, 2, 151, 32, 3,
	2, 2, 2, 152, 154, 5, 31, 16, 2, 153, 152, 3, 2, 2, 2, 153, 154, 3, 2,
	2, 2, 154, 161, 3, 2, 2, 2, 155, 157, 9, 4, 2, 2, 156, 155, 3, 2, 2, 2,
	157, 158, 3, 2, 2, 2, 158, 156, 3, 2, 2, 2, 158, 159, 3, 2, 2, 2, 159,
	162, 3, 2, 2, 2, 160, 162, 5, 35, 18, 2, 161, 156, 3, 2, 2, 2, 161, 160,
	3, 2, 2, 2, 162, 163, 3, 2, 2, 2, 163, 165, 9, 6, 2, 2, 164, 166, 9, 5,
	2, 2, 165, 164, 3, 2, 2, 2, 165, 166, 3, 2, 2, 2, 166, 168, 3, 2, 2, 2,
	167, 169, 9, 4, 2, 2, 168, 167, 3, 2, 2, 2, 169, 170, 3, 2, 2, 2, 170,
	168, 3, 2, 2, 2, 170, 171, 3, 2, 2, 2, 171, 177, 3, 2, 2, 2, 172, 174,
	5, 31, 16, 2, 173, 172, 3, 2, 2, 2, 173, 174, 3, 2, 2, 2, 174, 175, 3,
	2, 2, 2, 175, 177, 5, 35, 18, 2, 176, 153, 3, 2, 2, 2, 176, 173, 3, 2,
	2, 2, 177, 34, 3, 2, 2, 2, 178, 180, 9, 4, 2, 2, 179, 178, 3, 2, 2, 2,
	180, 183, 3, 2, 2, 2, 181, 179, 3, 2, 2, 2, 181, 182, 3, 2, 2, 2, 182,
	184, 3, 2, 2, 2, 183, 181, 3, 2, 2, 2, 184, 186, 7, 48, 2, 2, 185, 187,
	9, 4, 2, 2, 186, 185, 3, 2, 2, 2, 187, 188, 3, 2, 2, 2, 188, 186, 3, 2,
	2, 2, 188, 189, 3, 2, 2, 2, 189, 197, 3, 2, 2, 2, 190, 192, 9, 4, 2, 2,
	191, 190, 3, 2, 2, 2, 192, 193, 3, 2, 2, 2, 193, 191, 3, 2, 2, 2, 193,
	194, 3, 2, 2, 2, 194, 195, 3, 2, 2, 2, 195, 197, 7, 48, 2, 2, 196, 181,
	3, 2, 2, 2, 196, 191, 3, 2, 2, 2, 197, 36, 3, 2, 2, 2, 198, 200, 7, 15,
	2, 2, 199, 198, 3, 2, 2, 2, 199, 200, 3, 2, 2, 2, 200, 201, 3, 2, 2, 2,
	201, 202, 7, 12, 2, 2, 202, 38, 3, 2, 2, 2, 203, 212, 7, 41, 2, 2, 204,
	207, 7, 94, 2, 2, 205, 208, 5, 37, 19, 2, 206, 208, 11, 2, 2, 2, 207, 205,
	3, 2, 2, 2, 207, 206, 3, 2, 2, 2, 208, 211, 3, 2, 2, 2, 209, 211, 10, 7,
	2, 2, 210, 204, 3, 2, 2, 2, 210, 209, 3, 2, 2, 2, 211, 214, 3, 2, 2, 2,
	212, 210, 3, 2, 2, 2, 212, 213, 3, 2, 2, 2, 213, 215, 3, 2, 2, 2, 214,
	212, 3, 2, 2, 2, 215, 230, 7, 41, 2, 2, 216, 225, 7, 36, 2, 2, 217, 220,
	7, 94, 2, 2, 218, 221, 5, 37, 19, 2, 219, 221, 11, 2, 2, 2, 220, 218, 3,
	2, 2, 2, 220, 219, 3, 2, 2, 2, 221, 224, 3, 2, 2, 2, 222, 224, 10, 8, 2,
	2, 223, 217, 3, 2, 2, 2, 223, 222, 3, 2, 2, 2, 224, 227, 3, 2, 2, 2, 225,
	223, 3, 2, 2, 2, 225, 226, 3, 2, 2, 2, 226, 228, 3, 2, 2, 2, 227, 225,
	3, 2, 2, 2, 228, 230, 7, 36, 2, 2, 229, 203, 3, 2, 2, 2, 229, 216, 3, 2,
	2, 2, 230, 40, 3, 2, 2, 2, 231, 233, 9, 9, 2, 2, 232, 231, 3, 2, 2, 2,
	233, 236, 3, 2, 2, 2, 234, 236, 9, 10, 2, 2, 235, 232, 3, 2, 2, 2, 235,
	234, 3, 2, 2, 2, 236, 42, 3, 2, 2, 2, 237, 240, 5, 41, 21, 2, 238, 240,
	9, 4, 2, 2, 239, 237, 3, 2, 2, 2, 239, 238, 3, 2, 2, 2, 240, 44, 3, 2,
	2, 2, 36, 2, 53, 57, 65, 71, 73, 94, 114, 122, 133, 138, 142, 153, 158,
	161, 165, 170, 173, 176, 181, 188, 193, 196, 199, 207, 210, 212, 220, 223,
	225, 229, 232, 235, 239, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'['", "']'",
}

var lexerSymbolicNames = []string{
	"", "", "", "NAME", "INTEGER", "DECIMAL_INTEGER", "FLOAT_NUMBER", "STRING",
	"TRUE", "FALSE", "BLOCK_COMMENT", "WhiteSpace", "NewLine",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "NAME", "INTEGER", "DECIMAL_INTEGER", "FLOAT_NUMBER", "STRING",
	"TRUE", "FALSE", "BLOCK_COMMENT", "WhiteSpace", "NewLine", "NON_ZERO_DIGIT",
	"DIGIT", "SIGN", "EXPONENT_OR_POINT_FLOAT", "POINT_FLOAT", "RN", "SHORT_STRING",
	"ID_START", "ID_CONTINUE",
}

type ThreadComputationLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewThreadComputationLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *ThreadComputationLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewThreadComputationLexer(input antlr.CharStream) *ThreadComputationLexer {
	l := new(ThreadComputationLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "ThreadComputation.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ThreadComputationLexer tokens.
const (
	ThreadComputationLexerT__0            = 1
	ThreadComputationLexerT__1            = 2
	ThreadComputationLexerNAME            = 3
	ThreadComputationLexerINTEGER         = 4
	ThreadComputationLexerDECIMAL_INTEGER = 5
	ThreadComputationLexerFLOAT_NUMBER    = 6
	ThreadComputationLexerSTRING          = 7
	ThreadComputationLexerTRUE            = 8
	ThreadComputationLexerFALSE           = 9
	ThreadComputationLexerBLOCK_COMMENT   = 10
	ThreadComputationLexerWhiteSpace      = 11
	ThreadComputationLexerNewLine         = 12
)
