// Code generated from ThreadComputation.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 21, 245,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5,
	3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9,
	80, 10, 9, 3, 10, 6, 10, 83, 10, 10, 13, 10, 14, 10, 84, 3, 11, 3, 11,
	7, 11, 89, 10, 11, 12, 11, 14, 11, 92, 11, 11, 3, 12, 5, 12, 95, 10, 12,
	3, 12, 3, 12, 3, 13, 3, 13, 7, 13, 101, 10, 13, 12, 13, 14, 13, 104, 11,
	13, 3, 13, 6, 13, 107, 10, 13, 13, 13, 14, 13, 108, 5, 13, 111, 10, 13,
	3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3,
	18, 3, 18, 7, 18, 125, 10, 18, 12, 18, 14, 18, 128, 11, 18, 3, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 19, 6, 19, 136, 10, 19, 13, 19, 14, 19, 137, 3,
	19, 3, 19, 3, 20, 5, 20, 143, 10, 20, 3, 20, 3, 20, 5, 20, 147, 10, 20,
	3, 20, 3, 20, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 3, 23, 3, 24, 5, 24, 158,
	10, 24, 3, 24, 6, 24, 161, 10, 24, 13, 24, 14, 24, 162, 3, 24, 5, 24, 166,
	10, 24, 3, 24, 3, 24, 5, 24, 170, 10, 24, 3, 24, 6, 24, 173, 10, 24, 13,
	24, 14, 24, 174, 3, 24, 5, 24, 178, 10, 24, 3, 24, 5, 24, 181, 10, 24,
	3, 25, 7, 25, 184, 10, 25, 12, 25, 14, 25, 187, 11, 25, 3, 25, 3, 25, 6,
	25, 191, 10, 25, 13, 25, 14, 25, 192, 3, 25, 6, 25, 196, 10, 25, 13, 25,
	14, 25, 197, 3, 25, 5, 25, 201, 10, 25, 3, 26, 5, 26, 204, 10, 26, 3, 26,
	3, 26, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 212, 10, 27, 3, 27, 7, 27, 215,
	10, 27, 12, 27, 14, 27, 218, 11, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	5, 27, 225, 10, 27, 3, 27, 7, 27, 228, 10, 27, 12, 27, 14, 27, 231, 11,
	27, 3, 27, 5, 27, 234, 10, 27, 3, 28, 5, 28, 237, 10, 28, 3, 28, 5, 28,
	240, 10, 28, 3, 29, 3, 29, 5, 29, 244, 10, 29, 3, 126, 2, 30, 3, 3, 5,
	4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25,
	14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 2, 43,
	2, 45, 2, 47, 2, 49, 2, 51, 2, 53, 2, 55, 2, 57, 2, 3, 2, 13, 17, 2, 35,
	35, 40, 40, 44, 47, 49, 49, 61, 64, 96, 97, 126, 126, 174, 174, 217, 217,
	249, 249, 957, 957, 8595, 8595, 8597, 8597, 8712, 8713, 8745, 8746, 9,
	2, 38, 38, 65, 66, 98, 98, 128, 128, 8706, 8706, 8709, 8710, 8730, 8730,
	4, 2, 11, 11, 34, 34, 3, 2, 51, 59, 3, 2, 50, 59, 4, 2, 45, 45, 47, 47,
	4, 2, 71, 71, 103, 103, 6, 2, 12, 12, 15, 15, 41, 41, 94, 94, 6, 2, 12,
	12, 15, 15, 36, 36, 94, 94, 4, 2, 67, 92, 99, 124, 3, 2, 99, 124, 2, 270,
	2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2,
	2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2,
	2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2,
	2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3,
	2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 3, 59,
	3, 2, 2, 2, 5, 61, 3, 2, 2, 2, 7, 63, 3, 2, 2, 2, 9, 66, 3, 2, 2, 2, 11,
	68, 3, 2, 2, 2, 13, 70, 3, 2, 2, 2, 15, 72, 3, 2, 2, 2, 17, 79, 3, 2, 2,
	2, 19, 82, 3, 2, 2, 2, 21, 86, 3, 2, 2, 2, 23, 94, 3, 2, 2, 2, 25, 110,
	3, 2, 2, 2, 27, 112, 3, 2, 2, 2, 29, 114, 3, 2, 2, 2, 31, 116, 3, 2, 2,
	2, 33, 118, 3, 2, 2, 2, 35, 120, 3, 2, 2, 2, 37, 135, 3, 2, 2, 2, 39, 146,
	3, 2, 2, 2, 41, 150, 3, 2, 2, 2, 43, 152, 3, 2, 2, 2, 45, 154, 3, 2, 2,
	2, 47, 180, 3, 2, 2, 2, 49, 200, 3, 2, 2, 2, 51, 203, 3, 2, 2, 2, 53, 233,
	3, 2, 2, 2, 55, 239, 3, 2, 2, 2, 57, 243, 3, 2, 2, 2, 59, 60, 7, 93, 2,
	2, 60, 4, 3, 2, 2, 2, 61, 62, 7, 60, 2, 2, 62, 6, 3, 2, 2, 2, 63, 64, 7,
	61, 2, 2, 64, 65, 7, 61, 2, 2, 65, 8, 3, 2, 2, 2, 66, 67, 7, 95, 2, 2,
	67, 10, 3, 2, 2, 2, 68, 69, 7, 125, 2, 2, 69, 12, 3, 2, 2, 2, 70, 71, 7,
	127, 2, 2, 71, 14, 3, 2, 2, 2, 72, 73, 7, 37, 2, 2, 73, 16, 3, 2, 2, 2,
	74, 80, 5, 21, 11, 2, 75, 80, 5, 19, 10, 2, 76, 80, 5, 23, 12, 2, 77, 80,
	5, 27, 14, 2, 78, 80, 5, 29, 15, 2, 79, 74, 3, 2, 2, 2, 79, 75, 3, 2, 2,
	2, 79, 76, 3, 2, 2, 2, 79, 77, 3, 2, 2, 2, 79, 78, 3, 2, 2, 2, 80, 18,
	3, 2, 2, 2, 81, 83, 5, 31, 16, 2, 82, 81, 3, 2, 2, 2, 83, 84, 3, 2, 2,
	2, 84, 82, 3, 2, 2, 2, 84, 85, 3, 2, 2, 2, 85, 20, 3, 2, 2, 2, 86, 90,
	5, 55, 28, 2, 87, 89, 5, 57, 29, 2, 88, 87, 3, 2, 2, 2, 89, 92, 3, 2, 2,
	2, 90, 88, 3, 2, 2, 2, 90, 91, 3, 2, 2, 2, 91, 22, 3, 2, 2, 2, 92, 90,
	3, 2, 2, 2, 93, 95, 5, 45, 23, 2, 94, 93, 3, 2, 2, 2, 94, 95, 3, 2, 2,
	2, 95, 96, 3, 2, 2, 2, 96, 97, 5, 25, 13, 2, 97, 24, 3, 2, 2, 2, 98, 102,
	5, 41, 21, 2, 99, 101, 5, 43, 22, 2, 100, 99, 3, 2, 2, 2, 101, 104, 3,
	2, 2, 2, 102, 100, 3, 2, 2, 2, 102, 103, 3, 2, 2, 2, 103, 111, 3, 2, 2,
	2, 104, 102, 3, 2, 2, 2, 105, 107, 7, 50, 2, 2, 106, 105, 3, 2, 2, 2, 107,
	108, 3, 2, 2, 2, 108, 106, 3, 2, 2, 2, 108, 109, 3, 2, 2, 2, 109, 111,
	3, 2, 2, 2, 110, 98, 3, 2, 2, 2, 110, 106, 3, 2, 2, 2, 111, 26, 3, 2, 2,
	2, 112, 113, 5, 47, 24, 2, 113, 28, 3, 2, 2, 2, 114, 115, 5, 53, 27, 2,
	115, 30, 3, 2, 2, 2, 116, 117, 9, 2, 2, 2, 117, 32, 3, 2, 2, 2, 118, 119,
	9, 3, 2, 2, 119, 34, 3, 2, 2, 2, 120, 121, 7, 49, 2, 2, 121, 122, 7, 44,
	2, 2, 122, 126, 3, 2, 2, 2, 123, 125, 11, 2, 2, 2, 124, 123, 3, 2, 2, 2,
	125, 128, 3, 2, 2, 2, 126, 127, 3, 2, 2, 2, 126, 124, 3, 2, 2, 2, 127,
	129, 3, 2, 2, 2, 128, 126, 3, 2, 2, 2, 129, 130, 7, 44, 2, 2, 130, 131,
	7, 49, 2, 2, 131, 132, 3, 2, 2, 2, 132, 133, 8, 18, 2, 2, 133, 36, 3, 2,
	2, 2, 134, 136, 9, 4, 2, 2, 135, 134, 3, 2, 2, 2, 136, 137, 3, 2, 2, 2,
	137, 135, 3, 2, 2, 2, 137, 138, 3, 2, 2, 2, 138, 139, 3, 2, 2, 2, 139,
	140, 8, 19, 2, 2, 140, 38, 3, 2, 2, 2, 141, 143, 7, 15, 2, 2, 142, 141,
	3, 2, 2, 2, 142, 143, 3, 2, 2, 2, 143, 144, 3, 2, 2, 2, 144, 147, 7, 12,
	2, 2, 145, 147, 7, 15, 2, 2, 146, 142, 3, 2, 2, 2, 146, 145, 3, 2, 2, 2,
	147, 148, 3, 2, 2, 2, 148, 149, 8, 20, 2, 2, 149, 40, 3, 2, 2, 2, 150,
	151, 9, 5, 2, 2, 151, 42, 3, 2, 2, 2, 152, 153, 9, 6, 2, 2, 153, 44, 3,
	2, 2, 2, 154, 155, 9, 7, 2, 2, 155, 46, 3, 2, 2, 2, 156, 158, 5, 45, 23,
	2, 157, 156, 3, 2, 2, 2, 157, 158, 3, 2, 2, 2, 158, 165, 3, 2, 2, 2, 159,
	161, 9, 6, 2, 2, 160, 159, 3, 2, 2, 2, 161, 162, 3, 2, 2, 2, 162, 160,
	3, 2, 2, 2, 162, 163, 3, 2, 2, 2, 163, 166, 3, 2, 2, 2, 164, 166, 5, 49,
	25, 2, 165, 160, 3, 2, 2, 2, 165, 164, 3, 2, 2, 2, 166, 167, 3, 2, 2, 2,
	167, 169, 9, 8, 2, 2, 168, 170, 9, 7, 2, 2, 169, 168, 3, 2, 2, 2, 169,
	170, 3, 2, 2, 2, 170, 172, 3, 2, 2, 2, 171, 173, 9, 6, 2, 2, 172, 171,
	3, 2, 2, 2, 173, 174, 3, 2, 2, 2, 174, 172, 3, 2, 2, 2, 174, 175, 3, 2,
	2, 2, 175, 181, 3, 2, 2, 2, 176, 178, 5, 45, 23, 2, 177, 176, 3, 2, 2,
	2, 177, 178, 3, 2, 2, 2, 178, 179, 3, 2, 2, 2, 179, 181, 5, 49, 25, 2,
	180, 157, 3, 2, 2, 2, 180, 177, 3, 2, 2, 2, 181, 48, 3, 2, 2, 2, 182, 184,
	9, 6, 2, 2, 183, 182, 3, 2, 2, 2, 184, 187, 3, 2, 2, 2, 185, 183, 3, 2,
	2, 2, 185, 186, 3, 2, 2, 2, 186, 188, 3, 2, 2, 2, 187, 185, 3, 2, 2, 2,
	188, 190, 7, 48, 2, 2, 189, 191, 9, 6, 2, 2, 190, 189, 3, 2, 2, 2, 191,
	192, 3, 2, 2, 2, 192, 190, 3, 2, 2, 2, 192, 193, 3, 2, 2, 2, 193, 201,
	3, 2, 2, 2, 194, 196, 9, 6, 2, 2, 195, 194, 3, 2, 2, 2, 196, 197, 3, 2,
	2, 2, 197, 195, 3, 2, 2, 2, 197, 198, 3, 2, 2, 2, 198, 199, 3, 2, 2, 2,
	199, 201, 7, 48, 2, 2, 200, 185, 3, 2, 2, 2, 200, 195, 3, 2, 2, 2, 201,
	50, 3, 2, 2, 2, 202, 204, 7, 15, 2, 2, 203, 202, 3, 2, 2, 2, 203, 204,
	3, 2, 2, 2, 204, 205, 3, 2, 2, 2, 205, 206, 7, 12, 2, 2, 206, 52, 3, 2,
	2, 2, 207, 216, 7, 41, 2, 2, 208, 211, 7, 94, 2, 2, 209, 212, 5, 51, 26,
	2, 210, 212, 11, 2, 2, 2, 211, 209, 3, 2, 2, 2, 211, 210, 3, 2, 2, 2, 212,
	215, 3, 2, 2, 2, 213, 215, 10, 9, 2, 2, 214, 208, 3, 2, 2, 2, 214, 213,
	3, 2, 2, 2, 215, 218, 3, 2, 2, 2, 216, 214, 3, 2, 2, 2, 216, 217, 3, 2,
	2, 2, 217, 219, 3, 2, 2, 2, 218, 216, 3, 2, 2, 2, 219, 234, 7, 41, 2, 2,
	220, 229, 7, 36, 2, 2, 221, 224, 7, 94, 2, 2, 222, 225, 5, 51, 26, 2, 223,
	225, 11, 2, 2, 2, 224, 222, 3, 2, 2, 2, 224, 223, 3, 2, 2, 2, 225, 228,
	3, 2, 2, 2, 226, 228, 10, 10, 2, 2, 227, 221, 3, 2, 2, 2, 227, 226, 3,
	2, 2, 2, 228, 231, 3, 2, 2, 2, 229, 227, 3, 2, 2, 2, 229, 230, 3, 2, 2,
	2, 230, 232, 3, 2, 2, 2, 231, 229, 3, 2, 2, 2, 232, 234, 7, 36, 2, 2, 233,
	207, 3, 2, 2, 2, 233, 220, 3, 2, 2, 2, 234, 54, 3, 2, 2, 2, 235, 237, 9,
	11, 2, 2, 236, 235, 3, 2, 2, 2, 237, 240, 3, 2, 2, 2, 238, 240, 9, 12,
	2, 2, 239, 236, 3, 2, 2, 2, 239, 238, 3, 2, 2, 2, 240, 56, 3, 2, 2, 2,
	241, 244, 5, 55, 28, 2, 242, 244, 7, 48, 2, 2, 243, 241, 3, 2, 2, 2, 243,
	242, 3, 2, 2, 2, 244, 58, 3, 2, 2, 2, 36, 2, 79, 84, 90, 94, 102, 108,
	110, 126, 137, 142, 146, 157, 162, 165, 169, 174, 177, 180, 185, 192, 197,
	200, 203, 211, 214, 216, 224, 227, 229, 233, 236, 239, 243, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'['", "':'", "';;'", "']'", "'{'", "'}'", "'#'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "FUNC_NAME", "OPS", "NAME", "INTEGER",
	"DECIMAL_INTEGER", "FLOAT_NUMBER", "STRING", "OP", "MOD", "BLOCK_COMMENT",
	"WhiteSpace", "NewLine",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "FUNC_NAME", "OPS",
	"NAME", "INTEGER", "DECIMAL_INTEGER", "FLOAT_NUMBER", "STRING", "OP", "MOD",
	"BLOCK_COMMENT", "WhiteSpace", "NewLine", "NON_ZERO_DIGIT", "DIGIT", "SIGN",
	"EXPONENT_OR_POINT_FLOAT", "POINT_FLOAT", "RN", "SHORT_STRING", "ID_START",
	"ID_CONTINUE",
}

type ThreadComputationLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewThreadComputationLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *ThreadComputationLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewThreadComputationLexer(input antlr.CharStream) *ThreadComputationLexer {
	l := new(ThreadComputationLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "ThreadComputation.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ThreadComputationLexer tokens.
const (
	ThreadComputationLexerT__0            = 1
	ThreadComputationLexerT__1            = 2
	ThreadComputationLexerT__2            = 3
	ThreadComputationLexerT__3            = 4
	ThreadComputationLexerT__4            = 5
	ThreadComputationLexerT__5            = 6
	ThreadComputationLexerT__6            = 7
	ThreadComputationLexerFUNC_NAME       = 8
	ThreadComputationLexerOPS             = 9
	ThreadComputationLexerNAME            = 10
	ThreadComputationLexerINTEGER         = 11
	ThreadComputationLexerDECIMAL_INTEGER = 12
	ThreadComputationLexerFLOAT_NUMBER    = 13
	ThreadComputationLexerSTRING          = 14
	ThreadComputationLexerOP              = 15
	ThreadComputationLexerMOD             = 16
	ThreadComputationLexerBLOCK_COMMENT   = 17
	ThreadComputationLexerWhiteSpace      = 18
	ThreadComputationLexerNewLine         = 19
)
